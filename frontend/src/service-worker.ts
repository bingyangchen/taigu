/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { createHandlerBoundToURL, precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

const VERSION = "10.0.0";
console.log(`Service worker version: ${VERSION}`);

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html"),
);

// An example runtime caching route for requests that aren't handled by the precache.
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin &&
    (url.pathname.endsWith(".png") ||
      url.pathname.endsWith(".jpg") ||
      url.pathname.endsWith(".svg") ||
      url.pathname.endsWith(".webp") ||
      url.pathname.endsWith(".mp4")),

  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

self.addEventListener("install", (event) => {
  // Forces the waiting service worker to become the active service worker
  self.skipWaiting();
});

self.addEventListener("activate", (event) => {
  // Claims all clients immediately, which makes the new service worker active
  event.waitUntil(self.clients.claim());
  // NOTE: `window` is not defined in service worker
});

const channel = new BroadcastChannel("taigu");
self.addEventListener("fetch", (event) => {
  const { request } = event;
  const requestUrl = request.url;
  const method = request.method.toLowerCase();

  // Filter request
  if (/^http/gs.test(requestUrl)) {
    if (
      (/account\/me[/]?$/gs.test(requestUrl) ||
        /stock\/trade-records[/]?$/gs.test(requestUrl) ||
        /stock\/cash-dividends[/]?$/gs.test(requestUrl) ||
        /stock\/market-index[/]?$/gs.test(requestUrl) ||
        /memo\/trade-plans[/]?$/gs.test(requestUrl) ||
        /memo\/company-info[/]?$/gs.test(requestUrl) ||
        /memo\/favorites[/]?$/gs.test(requestUrl)) &&
      method === "get"
    ) {
      event.respondWith(
        caches.open("taigu").then((cache) => {
          return cache.match(request).then(async (cacheResponse) => {
            const fetchPromise = fetch(request).then((networkResponse) => {
              if (networkResponse.status < 400) {
                cache.put(request, networkResponse.clone());
                networkResponse.json().then((data) => {
                  channel.postMessage({ authorized: true, url: requestUrl, data });
                });
              } else if (networkResponse.status === 401) {
                // Same logic as src/utils/api.tsx
                caches.delete("taigu");
                channel.postMessage({ authorized: false });
              }
              return networkResponse;
            });
            return cacheResponse || (await fetchPromise);
          });
        }),
      );
    } else if (
      (/account\/logout[/]?$/gs.test(requestUrl) && method === "get") ||
      (/account\/delete[/]?$/gs.test(requestUrl) && method === "delete")
    ) {
      caches.delete("taigu");
    }
  }
  return;
});
