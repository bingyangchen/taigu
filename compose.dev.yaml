services:
    api-server:
        build:
            context: ./api-server
            dockerfile: Dockerfile
            target: dev_final
            tags:
                - trade-smartly-api-server:dev
        volumes:
            - ./api-server:/app:cached
        command: ["gunicorn"]
        env_file: .env
        expose:
            - "8000"
        ports:
            - "8000:8000"
        depends_on:
            - redis
            - db
        restart: unless-stopped
    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
            target: dev_final
            tags:
                - trade-smartly-frontend:dev
        volumes:
            - frontend_node_modules:/app/node_modules  # This also prevents node_modules/ from being synced back to the code base
            - ./frontend:/app:cached
        command: ["npm", "run", "dev"]
        expose:
            - "3000"
        ports:
            - "3000:3000"
        depends_on:
            - api-server
        restart: unless-stopped
    reverse-proxy:
        build:
            context: ./reverse-proxy
            dockerfile: Dockerfile
            target: dev_final
            tags:
                - trade-smartly-reverse-proxy:dev
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./reverse-proxy/nginx.dev.conf:/etc/nginx/conf.d/default.conf
        command: ["nginx", "-g", "daemon off;"]
        depends_on:
            - api-server
            - frontend
        restart: unless-stopped
    redis:
        image: redis:6.2.17
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        restart: unless-stopped
    db:
        image: postgres:16.8
        ports:
            - "5432:5432"
        volumes:
            # - ./backup.sql:/app/backup.sql # for the first time, we can use this to get some pre-existing data
            - db_data:/var/lib/postgresql/data
            - ./scripts/dev/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh # This will be executed when the container starts
        environment:
            - PGUSER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=postgres # for default, the application doesn't use this
            - APP_DB=trade_smartly
        restart: unless-stopped

volumes:
    redis_data:
    db_data:
    frontend_node_modules:
