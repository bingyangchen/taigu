services:
  api-server:
    image: taigutw/api-server:dev
    volumes:
      - ./api-server:/app:cached
    command: ["gunicorn"]
    env_file:
      - path: .env
        required: false
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - db
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"
  frontend:
    image: taigutw/frontend:dev
    volumes:
      - frontend_node_modules:/app/node_modules # This also prevents node_modules/ from being synced back to the code base
      - ./frontend:/app:cached
    command: ["npm", "run", "dev"]
    ports:
      - "3000:3000"
    depends_on:
      - api-server
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"
  reverse-proxy:
    image: nginx:1.27.4
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./reverse-proxy/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./reverse-proxy/dev-cert.pem:/etc/ssl/certs/taigu.tw/cert.pem:ro
      - ./reverse-proxy/dev-key.pem:/etc/ssl/certs/taigu.tw/key.pem:ro
    depends_on:
      - api-server
      - frontend
    command: ["nginx", "-g", "daemon off;"]
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"
  redis:
    image: redis:7.4.4-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"
  db:
    image: postgres:16.8
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=taigu
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"
  scheduler:
    image: taigutw/scheduler:dev
    volumes:
      - ./scheduler/main.py:/app/main.py:ro
    command: ["python", "-u", "main.py"]
    env_file: .env
    depends_on:
      - redis
      - db
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"

volumes:
  redis_data:
  db_data:
  frontend_node_modules:
